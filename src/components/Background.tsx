import { motion } from "framer-motion";
import { useMemo } from "react";

export const Background = () => {
  const getPathAnimation = () => ({
    pathLength: [1, 0, 1],
    transition: {
      duration: 3,
      ease: "easeInOut",
      times: [0, 0.5, 1], // Controls timing of each keyframe
      delay: Math.random() * 60,
      repeat: Infinity,
      repeatDelay: Math.random() * 60, // Longer delay between animations
    }
  });

  const basePaths = [
    "m -195.21351,-32.297869 2.80734,3.344681 c 0,0 2.00845,2.206047 3.32271,3.251978 1.31426,1.045931 4.57111,2.928341 4.57111,2.928341 -2.42274,-1.94e-4 -7.8944,0.34399 -8.50715,-0.348142 -0.19987,-1.195153 0.35855,-3.361514 0.49078,-4.689323 l 0.43993,-4.094744",
    "m -219.7808,-36.238971 c -0.17784,-3.488526 3.14421,-4.713314 5.2811,-2.27635 1.81679,2.071934 1.1115,5.333076 1.17739,7.829047 0.0302,1.143955 0.25265,3.157685 1.53779,3.517095 1.3985,0.391126 2.51631,-1.172599 3.90997,-2.156293 1.39366,-0.983694 3.36474,-1.865906 5.29167,-2.415582",
    "m -185.385,-42.090602 c 0.13046,-0.883468 0.41892,-1.759864 1.08046,-2.163941 3.00646,-1.836354 5.92526,0.913222 9.479,3.904066 2.53013,2.129371 5.02406,5.54992 4.33461,9.117499 -0.90864,4.701813 -6.74783,2.022034 -8.85483,-0.153317 -1.50833,-1.55727 -2.38757,-3.532472 -2.76216,-5.646426 -0.44215,-2.495196 -0.0842,-5.874136 -0.0631,-8.304511",
    "m -225.86625,-53.966055 c 3.33403,-0.152025 7.99943,0.573255 10.07833,-0.799854 2.07891,-1.373109 1.89271,-3.64286 1.4362,-5.021022 -0.36376,-1.098177 -2.28322,-3.301538 -3.01478,-3.083858 -0.73156,0.21768 -0.61899,3.066589 -0.44558,3.881139 0.38344,1.801021 0.91805,2.426181 2.46251,4.418562 1.54446,1.992382 3.97859,3.642639 5.8875,4.440329 1.96193,0.819847 6.66786,0.963726 7.98525,-0.264312 1.3174,-1.228039 2.43292,-2.524381 2.5393,-3.838739 0.10637,-1.314358 -0.48322,-3.547087 -1.9603,-2.845321 -1.47707,0.701766 -1.26823,4.180459 -0.72668,6.280593 0.54154,2.100133 3.21044,6.017183 5.64486,8.198252",
    "m -168.61884,-67.22287 c -1.06357,1.667437 -2.31086,3.601849 -4.34201,4.153269 -2.19455,0.595765 -4.45208,-0.521004 -6.39958,0.987658 -1.09677,0.849625 -1.7612,2.388912 -2.33064,3.615323 -0.4362,0.939446 -1.01655,3.174496 -1.9818,3.491802 -0.87952,0.289124 -5.11155,-4.35124 -6.02001,-4.6087 -0.24125,3.432043 -0.19445,6.677714 -0.19006,10.11538",
  ];

  // Create grid positions
  const gridPositions = useMemo(() => Array.from({ length: 10 }, (_, row) =>
    Array.from({ length: 10 }, (_, col) => ({
      x: col * 58.83, // Horizontal spacing
      y: row * 46, // Vertical spacing
    }))
  ).flat(), []);

  return (
    <div className="absolute inset-0 z-[-1] overflow-hidden">
      <svg className="w-full h-full" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <pattern
            id="background-pattern"
            width="580.83"
            height="460"
            patternUnits="userSpaceOnUse"
          ><g transform="translate(226.36626,67.722868) scale(2)">
            {gridPositions.map((position, i) =>
              basePaths.map((path, pathIndex) => (
                <motion.path
                  key={`${i}-${pathIndex}`}
                  d={path}
                  animate={getPathAnimation()}
                  transform={`translate(${position.x}, ${position.y})`}
                  className="fill-none stroke-white stroke-[0.5]"
                />
              ))
            )}
          </g>
          </pattern>
        </defs>

        <rect
          width="100%"
          height="100%"
          fill="url(#background-pattern)"
          style={{ fill: "url(#background-pattern)" }}
        />
       
      </svg>
    </div>
  );
};
